const URL = require('url').URL;
const axios = require('axios');
const DB = {
    EnvironmentModel: null,
    ApplicationModel: null,
};

let AUTH_HOSTS = [];
let SYNC_INTERVAL = null;

const APPLICATION_ALIAS = {
    '55tec_integration_api': 'integration',
    '55tec_admin_api': 'admin',
    '55tec_admin': 'admin',
    '55tec_plataform_api': 'admin',
    '55tec_plataform': 'admin',
    '55tec_report_api': 'report',
    '55tec_report': 'report',
    '55tec_realtime_api': 'realtime',
    '55tec_pbx_monitor': 'realtime',
    '55tec_realtime_wallboard': 'realtime',
    // '55tec_central_api': 'api_central_address',
    '55tec_webphone_react': 'webphone',
    '55tec_webphone_api': 'webphone',
};

const APPLICATION_ALIASES = [...new Set(Object.values(APPLICATION_ALIAS))];

exports.get = function(config, env, { clientId, sipServer } = {}, filter = false, withBackup = false) {

    const fileName = `./storage/${config}/${env}`;
    let data = require(fileName);
    if (config !== 'application-config') return data;

    let result = (() => {
        data = data.map(o => {
            o = {
                ...o,
                settings: {...o.settings,
                    sip: ((o.settings || {}).sip || []).map(e => ({...e}))
                }
            };
            o.toJSON = function() {
                return {
                    ...o,
                    "serialize": undefined,
                    "email_settings": undefined,
                    "settings": {
                        ...(o.settings || {}),
                        "klipfolio": {
                            ...((o.settings || {}).klipfolio || {}),
                            "account": undefined,
                            "settings": undefined
                        },
                        "iugu": undefined,
                        "ibm_bluemix": undefined,
                        "sms": undefined,
                    }
                };
            }.bind(o);
            return o;
        });
        if (!clientId) return data;

        if ((!DB.EnvironmentModel || !DB.ApplicationModel || !sipServer) && !AUTH_HOSTS.length) {
            console.warn(`SIP settings weren\'t overridden due to neither database models not being setted nor auth apis being defined`);
            return data;
        }

        const appConfig = data.find(e => e.identifier === '55pbx');
        if (!appConfig) return data;

        if (sipServer && DB.EnvironmentModel && DB.ApplicationModel) {
            let sipConfig = appConfig.settings.sip.find(e => e.sip_server === sipServer);
            if (!sipConfig) return data;
            return (async () => {
                try {
                    const environment = await DB.EnvironmentModel.findOne({ clients: clientId, active: true });
                    if (!environment) return data;
                    const applications =  await DB.ApplicationModel.find({ _id: { $in: environment.applications }, active: true });
                    if (!applications.length) return data;

                    data = data.map(e => {
                        if (e.identifier !== '55pbx') return e;
                        let sip = e.settings.sip;
                        if (filter) sip = sip.filter(e => e === sipConfig);
                        e.settings.sip = sip;
                        return e;
                    });
                    for (const application of applications) {
                        const alias = APPLICATION_ALIAS[application.name];
                        if (!alias) continue;
                        if (sipConfig.hasOwnProperty(`${alias}_base`)) {
                            sipConfig[`${alias}_base`] = application.interface.api || sipConfig[`${alias}_base`];
                        }
                        if (sipConfig.hasOwnProperty(`${alias}_socket`)) {
                            sipConfig[`${alias}_socket`] =
                                typeof application.interface.socket === 'object' ?
                                    application.interface.socket.base : application.interface.socket || sipConfig[`${alias}_socket`];
                        }
                        if (sipConfig.hasOwnProperty(`${alias}_integrator_socket`)) {
                            sipConfig[`${alias}_integrator_socket`] =
                                typeof application.interface.socket === 'object' ?
                                    application.interface.socket.integrator : application.interface.socket ||
                                    sipConfig[`${alias}_integrator_socket`];
                        }
                        if (application.interface.www) sipConfig[`${alias}_www`] = application.interface.www;
                    }

                    return data;
                } catch(err) {
                    console.error(err);
                    return data;
                }
            })();
        }

        return (async () => {
            for (const host of AUTH_HOSTS) {
                try {
                    let sipConfig = await getSIPSettings(host, clientId);

                    data = data.map(e => {
                        if (e.identifier !== '55pbx') return e;
                        let sip = e.settings.sip;
                        if (filter) sip = sip.filter(e => e.sip_server === sipConfig.sip_server);
                        e.settings.sip = sip;
                        return e;
                    });
                    return data;
                } catch(err) {
                    console.error(err);
                }
            }

            return data;
        })();
    })();

    const backupDecorator = function(result) {
        const parsedData = result.find(e => e.identifier === '55pbx');
        if (!parsedData) return result;
        parsedData.settings.sip = parsedData.settings.sip.map(e => {
            // const sip = e.sip_server.replace(/_sem_?stun/, '');
            for (const k in e) {
                if (!APPLICATION_ALIASES.some(alias => k.startsWith(alias + '_'))) continue;
                if (!(e[k] instanceof Array)) e[k] = [e[k]];
                if (!withBackup) {
                    e[k] = e[k][0];
                    continue;
                }
                if (typeof withBackup === 'string') withBackup = [ withBackup ];
                if (withBackup instanceof Array && !withBackup.find(e => k.includes(e))) {
                    e[k] = e[k][0];
                    continue;
                }

                if (e[k] instanceof Array && e[k].length === 1) e[k] = e[k][0];
                // const { hostname, protocol } = new URL(e[k][0]);
                // e[k].push(`${protocol}//${hostname}/${sip}`);
            }
            return e;
        });
        return result;
    };
    if (result && result.then) return result.then(backupDecorator);
    return backupDecorator(result);
};

exports.setUp = function(EnvironmentModel, ApplicationModel) {
    DB.EnvironmentModel = EnvironmentModel;
    DB.ApplicationModel = ApplicationModel;
};

exports.connect = function(authHosts) {
    if (!(authHosts instanceof Array)) authHosts = [];
    AUTH_HOSTS = authHosts.filter(Boolean);
};

async function getSIPSettings(authHost, clientId = '') {
    const response = await axios.get(`${authHost}/integrations/auth/ext/settings/sip${clientId && '/' + clientId}`, {
        timeout: 10000,
    });
    if (('' + response.status)[0] !== '2') throw new Error(`${response.status} - ${JSON.stringify(response.data)}`);
    return response.data;
}

